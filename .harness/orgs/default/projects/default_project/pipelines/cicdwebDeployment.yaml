pipeline:
  name: cicd-webDeployment
  identifier: cicdwebDeployment
  projectIdentifier: default_project
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: hiteshsurya17flightdelay
        build:
          type: branch
          spec:
            branch: main
  stages:
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: true
          platform:
            os: MacOS
            arch: Arm64
          runtime:
            type: Docker
            spec: {}
          execution:
            steps:
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build Docker Image
                  identifier: Build_Docker_Image
                  spec:
                    connectorRef: DockerConnector
                    repo: hiteshsuryadevara130812/myapp
                    tags:
                      - latest
                    dockerfile: Dockerfile
                    context: .
    - stage:
        name: Terraform Provisioning
        identifier: Terraform_Provisioning
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Write Terraform Files
                  identifier: Write_Terraform_Files
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          mkdir -p terraform
                          cd terraform

                          # Write main.tf
                          cat <<EOF > main.tf
                          provider "kubernetes" {
                            config_path = "~/.kube/config"
                          }

                          resource "kubernetes_deployment" "app" {
                            metadata {
                              name = "myapp"
                              labels = {
                                app = "myapp"
                              }
                            }

                            spec {
                              replicas = 1

                              selector {
                                match_labels = {
                                  app = "myapp"
                                }
                              }

                              template {
                                metadata {
                                  labels = {
                                    app = "myapp"
                                  }
                                }

                                spec {
                                  container {
                                    image = "myapp:latest"
                                    name  = "myapp"
                                    port {
                                      container_port = 5000
                                    }
                                  }
                                }
                              }
                            }
                          }

                          resource "kubernetes_service" "app_service" {
                            metadata {
                              name = "myapp-service"
                            }

                            spec {
                              selector = {
                                app = "myapp"
                              }

                              port {
                                protocol    = "TCP"
                                port        = 80
                                target_port = 5000
                              }

                              type = "NodePort"
                            }
                          }
                          EOF

                          # Write versions.tf
                          cat <<EOF > versions.tf
                          terraform {
                            required_providers {
                              kubernetes = {
                                source  = "hashicorp/kubernetes"
                                version = "~> 2.0"
                              }
                            }
                          }
                          EOF
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: terraform init
                  identifier: terraform_init
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo "=== DEBUG INFO ==="
                          echo "Hostname       : $(hostname)"
                          echo "Current User   : $(whoami)"
                          echo "Current Shell  : $SHELL"
                          echo "Shell Location : $(which $SHELL)"
                          echo "Script Path    : $0"
                          echo "Working Dir    : $(pwd)"
                          echo "PATH           : $PATH"
                          echo "Terraform Path : $(which terraform || echo 'Not found')"
                          echo "Terraform Ver  : $(terraform version || echo 'Not installed')"
                          echo "==================="

                          terraform version
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: Terraform apply
                  identifier: Terraform_apply
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          export PATH=$PATH:/opt/homebrew/bin
                          terraform init
                          terraform apply -auto-approve
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
        tags: {}
        delegateSelectors:
          - macos-arm64
